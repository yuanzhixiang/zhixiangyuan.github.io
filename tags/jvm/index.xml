<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Yuanzx Blog</title>
    <link>https://zhixiangyuan.github.io/tags/jvm/</link>
    <description>Recent content in JVM on Yuanzx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Sat, 26 Oct 2019 21:42:18 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM 内存模型</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 26 Oct 2019 21:42:18 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM 的内存模型分为主内存和线程的工作内存两大块，这属于一个抽象的内存模型，用于解决并发问题，与 JVM 中的内存结构如堆、栈没什么关系，不要弄混。</description>
    </item>
    
    <item>
      <title>字符串常量池</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <pubDate>Sat, 26 Oct 2019 21:23:31 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <description>JVM 为了提高性能和减少内存开销，实现数据共享，所以引入了字符串常量池。字符串常量池存在于方法区当中，创建字符串常量时，首先判断字符串是否存在于</description>
    </item>
    
    <item>
      <title>JVM 堆内存中的结构</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 26 Oct 2019 20:43:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description>1 堆内存结构 堆内存中分为三块，分别是年轻代、老年代和方法区，Java 堆不需要连续的内存，可以动态增加内存，增加失败则抛出 OutOfMemoryError 异常 1.1 年轻代与老年</description>
    </item>
    
    <item>
      <title>常见的垃圾回收算法</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 26 Oct 2019 20:34:00 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>1 标记清除算法 标记清除算法有两个阶段，标记阶段和回收阶段。标记阶段将需要被清除的对象打上标签，回收阶段完成对于对象的回收。这种算法回收过后会</description>
    </item>
    
    <item>
      <title>常见垃圾回收器</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Sat, 26 Oct 2019 20:29:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>Serial Garbage Collector: 单线程 GC Parallel Garbage Collector: 多线程 GC CMS Garbage Collector: 多线程 GC G1 Garbage Collector: jdk7 引进的 GC 优点：多线程运行，适合高并发场景，暂停时间短 目标：逐步取代 CMS GC</description>
    </item>
    
    <item>
      <title>JVM 中如何判断对象生死</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%94%9F%E6%AD%BB/</link>
      <pubDate>Sat, 26 Oct 2019 20:06:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%94%9F%E6%AD%BB/</guid>
      <description>1 引用器计数法 如果某个引用被别的引用引用一次，那么引用计数器就加一，引用计数器为 0 时便回收对象。 这种方法有缺陷，如果出现循环引用，那么 GC 便无</description>
    </item>
    
    <item>
      <title>int 入栈指令 iconst、bipush、sipush、ldc</title>
      <link>https://zhixiangyuan.github.io/2018/08/11/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</link>
      <pubDate>Sat, 11 Aug 2018 18:47:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/08/11/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</guid>
      <description>1 前言 本文介绍 int 数值入栈指令 iconst、bipush、sipubh、Idc。 根据 int 取值不同分为以下几种可能性： iconst: [-1, 5] bipush: [-128, -2]∪[6, 127] sipush:</description>
    </item>
    
  </channel>
</rss>