<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络协议 on Yuanzx Blog</title>
    <link>https://zhixiangyuan.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link>
    <description>Recent content in 网络协议 on Yuanzx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Mon, 18 Nov 2019 14:51:35 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于 TCP 半连接队列与全连接队列</title>
      <link>https://zhixiangyuan.github.io/2019/11/18/%E5%85%B3%E4%BA%8E-tcp-%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E4%B8%8E%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 18 Nov 2019 14:51:35 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/18/%E5%85%B3%E4%BA%8E-tcp-%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E4%B8%8E%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</guid>
      <description>以下使用 client 代替客户端，server 代替服务端，看起来更清晰 半连接队列与全连接队列与服务端相关，在 server 调用 int listen(int sockfd, int backlog); 开启 LISTEN 监听时，与此同时内核创</description>
    </item>
    
    <item>
      <title>TCP 11 种状态变迁</title>
      <link>https://zhixiangyuan.github.io/2019/11/17/tcp-11-%E7%A7%8D%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81/</link>
      <pubDate>Sun, 17 Nov 2019 15:56:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/17/tcp-11-%E7%A7%8D%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81/</guid>
      <description>1 CLOSED CLOSED 状态是一个假想的状态，它处于 TCP 连接还未开始建立或者已经释放掉的状态。因此无法通过 netstat 或者 lsof 看到。 从 CLOSED 状态转换为其他状态有两种可能 一种是服</description>
    </item>
    
    <item>
      <title>TCP 三次握手详解</title>
      <link>https://zhixiangyuan.github.io/2019/11/17/tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 17 Nov 2019 14:40:12 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/17/tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>1 三次握手数据包交互过程 下面用 client 表述客户端，server 表述服务端，这样看起来更清晰。 client 发出 SYN 数据包给服务端，同时初始化一个序列号 X，发出数</description>
    </item>
    
    <item>
      <title>TCP 四次挥手详解</title>
      <link>https://zhixiangyuan.github.io/2019/11/17/tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 17 Nov 2019 11:00:11 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/17/tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>1 四次挥手数据包的交互过程 下面用 client 表述客户端，server 表述服务端，这样看起来更清晰。 client 发送 FIN 包给 server，发送后 client 进入 FIN-WAIT-1 状态 server 收到 client</description>
    </item>
    
    <item>
      <title>构造一个处于 SYN_SENT 状态的连接</title>
      <link>https://zhixiangyuan.github.io/2019/11/14/%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E5%A4%84%E4%BA%8E-syn_sent-%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Thu, 14 Nov 2019 21:29:27 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/14/%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E5%A4%84%E4%BA%8E-syn_sent-%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%9E%E6%8E%A5/</guid>
      <description>下图是一个三次握手的变化过程 在客户端发出 SYN 包之后，便进入 SYN-SENT 的状态，如果没有收到服务端的 ACK，那么便会一直维持在这个状态，多次重发 SYN 数据包，</description>
    </item>
    
    <item>
      <title>tcpdump 小记</title>
      <link>https://zhixiangyuan.github.io/2019/11/14/tcpdump-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 14 Nov 2019 09:39:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/14/tcpdump-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>wireshark 的基本操作</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/wireshark-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 13 Nov 2019 10:50:12 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/wireshark-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>1 抓包过滤 抓包的过程很耗 CPU 和内存资源而且大部分情况下我们不是对所有的包都感兴趣，因此可以只抓取满足特定条件的包，丢弃不感兴趣的包，比如只想抓</description>
    </item>
    
    <item>
      <title>以太网的帧格式</title>
      <link>https://zhixiangyuan.github.io/2019/11/12/%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Tue, 12 Nov 2019 23:08:25 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/12/%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F/</guid>
      <description>1 以太网的帧格式 以太网的帧最小是 64 字节，除去 14 字节的头部（目标地址 + 源地址 + 长度类型）和 4 字节的 CRC 字段，有效荷载最小为 46 字节。最大帧为 1518 字节</description>
    </item>
    
    <item>
      <title>SSL 加密流程简述</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/ssl-%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Sun, 27 Oct 2019 10:51:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/ssl-%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</guid>
      <description>SSL 加密的思想运用到了对称加密和非对称加密，非堆成加密的优势在于没有私钥则无法解密，所以想要传输信息的一端只需要拿到公钥就可以完成加密传输，但</description>
    </item>
    
    <item>
      <title>Http 协议格式</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/http-%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 27 Oct 2019 10:01:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/http-%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F/</guid>
      <description>1 HTTP 请求报文 HTTP 请求报文由请求行、请求头部、空行和请求包体 4 个部分组成，如下图所示： 1.1 请求行 请求行由方法字段、URL 字段和 HTTP 协议版本字段 3 个部</description>
    </item>
    
    <item>
      <title>TCP：首部结构</title>
      <link>https://zhixiangyuan.github.io/2019/07/12/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 12 Jul 2019 15:05:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/12/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</guid>
      <description>鲁迅曾今说过，TCP 是一个可靠的（reliable）、面向连接的（connection-oriented）、基于字节流（byte-strea</description>
    </item>
    
    <item>
      <title>IP 协议</title>
      <link>https://zhixiangyuan.github.io/2019/07/09/ip-%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 09 Jul 2019 21:06:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/09/ip-%E5%8D%8F%E8%AE%AE/</guid>
      <description>1 网际协议 IP 简介 IP 协议提供不可靠的、无连接的数据包传输 不可靠指的是从客户端发到目标端的数据包对方可能会收不到 无连接指的是发送的每个数据包都是</description>
    </item>
    
    <item>
      <title>用户数据报协议：UDP</title>
      <link>https://zhixiangyuan.github.io/2019/07/09/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</link>
      <pubDate>Tue, 09 Jul 2019 16:12:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/09/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</guid>
      <description>1 UDP 协议简介 UDP 是一种面向数据包协议，应用层向下传递的每一次操作都会产生一个 UDP 数据包，这一个 UDP 数据包会组装成一份 IP 数据包，这里是一一对应的关系</description>
    </item>
    
  </channel>
</rss>