<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>netty on 养猪场</title>
    <link>https://zhixiangyuan.github.io/tags/netty/</link>
    <description>Recent content in netty on 养猪场</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Mon, 27 Jan 2020 12:58:11 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty 对于 ThreadLocal 的优化</title>
      <link>https://zhixiangyuan.github.io/2020/01/27/netty-%E5%AF%B9%E4%BA%8E-threadlocal-%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 27 Jan 2020 12:58:11 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/27/netty-%E5%AF%B9%E4%BA%8E-threadlocal-%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>对于 ThreadLocal 这个使用起来很方便的线程级别的全局变量，其本身有两点是需要注意的 第一，它在线程池的环境中使用时是可能会导致内存泄漏的，这一点如果大家不</description>
    </item>
    
    <item>
      <title>分析 Netty 中基于 ThreadLocal 的对象池</title>
      <link>https://zhixiangyuan.github.io/2020/01/26/%E5%88%86%E6%9E%90-netty-%E4%B8%AD%E5%9F%BA%E4%BA%8E-threadlocal-%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0/</link>
      <pubDate>Sun, 26 Jan 2020 19:39:28 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/26/%E5%88%86%E6%9E%90-netty-%E4%B8%AD%E5%9F%BA%E4%BA%8E-threadlocal-%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0/</guid>
      <description>1 对象池原理简述 Netty 中提供的对象池使用起来非常简单，在使用的时候只需要关注两个点，一是需要实现相应的 newObject 对象的方法，毕竟对象池里面放置什么对象是</description>
    </item>
    
    <item>
      <title>Netty 是如何检测是否有新连接接入？又如何对新连接进行接入？</title>
      <link>https://zhixiangyuan.github.io/2020/01/24/netty-%E6%98%AF%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E6%9C%89%E6%96%B0%E8%BF%9E%E6%8E%A5%E6%8E%A5%E5%85%A5%E5%8F%88%E5%A6%82%E4%BD%95%E5%AF%B9%E6%96%B0%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%85%A5/</link>
      <pubDate>Fri, 24 Jan 2020 15:04:33 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/24/netty-%E6%98%AF%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E6%9C%89%E6%96%B0%E8%BF%9E%E6%8E%A5%E6%8E%A5%E5%85%A5%E5%8F%88%E5%A6%82%E4%BD%95%E5%AF%B9%E6%96%B0%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%85%A5/</guid>
      <description>1 如何检测是否有新连接接入 一般对于服务端，我们会 new 两个 NioEventLoopGroup，一个我们称为 bossGroup，另一个称为 work</description>
    </item>
    
    <item>
      <title>Netty 服务端起多少个线程？何时启动 EventLoop？</title>
      <link>https://zhixiangyuan.github.io/2020/01/23/netty-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B5%B7%E5%A4%9A%E5%B0%91%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BD%95%E6%97%B6%E5%90%AF%E5%8A%A8-eventloop/</link>
      <pubDate>Thu, 23 Jan 2020 22:53:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/23/netty-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B5%B7%E5%A4%9A%E5%B0%91%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BD%95%E6%97%B6%E5%90%AF%E5%8A%A8-eventloop/</guid>
      <description>1 Netty 服务端起多少个线程 一般我们都是直接去 new NioEventLoopGroup，通过跟踪 NioEventLoopGroup 的构造方法能够发现以下的代码 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>Netty 对于 Selector 的 KeySet 的优化</title>
      <link>https://zhixiangyuan.github.io/2020/01/23/netty-%E5%AF%B9%E4%BA%8E-selector-%E7%9A%84-keyset-%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 23 Jan 2020 21:56:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/23/netty-%E5%AF%B9%E4%BA%8E-selector-%E7%9A%84-keyset-%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>在使用 Jdk Nio 的时候，一般我们可能就直接使用 SelectorProvider.provider().openSelector() 来获取一个 Selector 便直接开始使用了，但是，netty 对于 Selector 竟然也有优化操作。 Selector 默认的 KeySet 的实现方式是 Has</description>
    </item>
    
    <item>
      <title>Netty 如何解决 JDK 空轮训的 BUG</title>
      <link>https://zhixiangyuan.github.io/2020/01/23/netty-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3-jdk-%E7%A9%BA%E8%BD%AE%E8%AE%AD%E7%9A%84-bug/</link>
      <pubDate>Thu, 23 Jan 2020 21:21:31 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/23/netty-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3-jdk-%E7%A9%BA%E8%BD%AE%E8%AE%AD%E7%9A%84-bug/</guid>
      <description>Netty 解决空轮训的 bug 的方式很简单，通过执行阻塞 select 的方式阻塞一段时间，如果在执行完毕之后阻塞的时间小于设定的阻塞的时间，那么 selectCnt 便 +1，当达到一定次</description>
    </item>
    
    <item>
      <title>PowerOfTwoEventExecutorChooser 的优化</title>
      <link>https://zhixiangyuan.github.io/2020/01/23/poweroftwoeventexecutorchooser-%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 23 Jan 2020 20:01:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/23/poweroftwoeventexecutorchooser-%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>Netty 内部在选择使用什么 EventLoop 的时候，会使用 Chooser 来进行判断，其实就是直接调用 Chooser 中的 next 方法，对于这个地方的实现有两种，一种是 GenericEventExecutorChooser 的实现方式，也是常用的想法</description>
    </item>
    
    <item>
      <title>判断是否是 2 的幂次的方法</title>
      <link>https://zhixiangyuan.github.io/2020/01/23/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF-2-%E7%9A%84%E5%B9%82%E6%AC%A1%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 23 Jan 2020 02:26:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/23/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF-2-%E7%9A%84%E5%B9%82%E6%AC%A1%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>该方法来自 Netty 源码 1 2 3 4 5 6 7 /** * @param val 需要被判断是否是 2 的幂次的数 * @return true 是 2 的幂次 / false 不是 2 的幂次 */ public static boolean isPowerOfTwo(int val) { return (val &amp;amp; -val) == val; }</description>
    </item>
    
  </channel>
</rss>