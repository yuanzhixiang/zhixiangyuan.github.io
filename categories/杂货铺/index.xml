<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂货铺 on Yuanzx Blog</title>
    <link>https://zhixiangyuan.github.io/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/</link>
    <description>Recent content in 杂货铺 on Yuanzx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Sat, 02 Nov 2019 22:05:42 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从系统架构角度对大脑的思考</title>
      <link>https://zhixiangyuan.github.io/2019/11/02/%E4%BB%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%A7%92%E5%BA%A6%E5%AF%B9%E5%A4%A7%E8%84%91%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sat, 02 Nov 2019 22:05:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/02/%E4%BB%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%A7%92%E5%BA%A6%E5%AF%B9%E5%A4%A7%E8%84%91%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>现在一个比较通用系统架构都会用到数据库和缓存，对于外部的输入会先进入业务系统，最终根据存储策略打到缓存和数据库上。对于我这个大脑的用户而言，</description>
    </item>
    
    <item>
      <title>MySQL 事务管理</title>
      <link>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 02 Nov 2019 21:21:35 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</guid>
      <description>1 事务管理 以下的语句是连接隔离的，每个连接都有自己的环境。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- 开始事务 START TRANSACTION; -- 事务回滚 ROLLBACK; -- 提交事务 COMMIT; -- 设置保</description>
    </item>
    
    <item>
      <title>MySQL 存储过程的创建、执行和删除</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/mysql-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Fri, 01 Nov 2019 18:39:30 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/mysql-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>对于现在大多数的互联网应用，数据库的瓶颈在于数据库的读写，所以需要数据库尽快完成读写操作，业务操作放到服务器上做。 1 创建存储过程 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>MySQL 视图的创建和删除</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/mysql-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Fri, 01 Nov 2019 16:45:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/mysql-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>视图便是临时表，在每次查看视图的时候执行指定的 SQL 语句。 1 视图的创建 1 2 -- 创建视图 CREATE VIEW &amp;lt;$view_name&amp;gt; AS &amp;lt;SELECT ...&amp;gt;; 2 视图的删除 1 2 -- 删除视图 DROP VIEW &amp;lt;$view_name&amp;gt;; 3 对视图中数据的</description>
    </item>
    
    <item>
      <title>世界上没有技术驱动型公司</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%B2%A1%E6%9C%89%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%85%AC%E5%8F%B8/</link>
      <pubDate>Fri, 01 Nov 2019 14:08:41 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%B2%A1%E6%9C%89%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%85%AC%E5%8F%B8/</guid>
      <description>由于这篇文章写得太好，所以将该文章搬运过来作为备份，原文链接在参考资料中。以下为原文： 作者介绍： 智煜徽，洛林大学计算机专业研究生，现就职于华</description>
    </item>
    
    <item>
      <title>清除 Git 未追踪的文件和文件夹</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/%E6%B8%85%E9%99%A4-git-%E6%9C%AA%E8%BF%BD%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 01 Nov 2019 11:08:07 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/%E6%B8%85%E9%99%A4-git-%E6%9C%AA%E8%BF%BD%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>清除未追踪的文件使用 git clean 命令，git clean 有以下几个常用参数 1 2 3 -f # f 应该是 file 的缩写，表示删除未追踪的文件 -d # d 应该是 directory 的缩写，表示删除未追踪</description>
    </item>
    
    <item>
      <title>解决升级系统后 IntelliJ IDEA 报 Can&#39;t use Subversion command line client: svn 的问题</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%90%8E-intellij-idea-%E6%8A%A5-cant-use-subversion-command-line-client-svn-%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 01 Nov 2019 10:00:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%90%8E-intellij-idea-%E6%8A%A5-cant-use-subversion-command-line-client-svn-%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>系统版本：macOS Catalina Version 10.15.1 在升级完系统后出现了下图中的错误 这个问题其实是由于命令行中 svn 命令失效导致的，在命令行中输入 svn 爆出以下错误 1 xcrun: error: invalid active</description>
    </item>
    
    <item>
      <title>反斜杠 r 与 反斜杠 n 的含义</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/%E5%8F%8D%E6%96%9C%E6%9D%A0-r-%E4%B8%8E-%E5%8F%8D%E6%96%9C%E6%9D%A0-n-%E7%9A%84%E5%90%AB%E4%B9%89/</link>
      <pubDate>Thu, 31 Oct 2019 20:39:40 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/%E5%8F%8D%E6%96%9C%E6%9D%A0-r-%E4%B8%8E-%E5%8F%8D%E6%96%9C%E6%9D%A0-n-%E7%9A%84%E5%90%AB%E4%B9%89/</guid>
      <description>1 \r \n 的来历 在计算机还没有出现之前，有一种叫做电传打自己的东西，每秒钟可以打 10 个字符，每个字符 0.1 秒，但是他有一个问题，就是换行的时候需要 0.2 秒</description>
    </item>
    
    <item>
      <title>MySQL 创建表、修改表和删除表</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/mysql-%E5%88%9B%E5%BB%BA%E8%A1%A8%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E8%A1%A8/</link>
      <pubDate>Thu, 31 Oct 2019 15:22:49 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/mysql-%E5%88%9B%E5%BB%BA%E8%A1%A8%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E8%A1%A8/</guid>
      <description>1 创建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 CREATE TABLE [IF NOT EXISTS] &amp;lt;table_name&amp;gt; ( &amp;lt;field_name&amp;gt; &amp;lt;data_type&amp;gt;[size] [NOT NULL|NULL] [DEFAULT &amp;lt;value&amp;gt;] [AUTO_INCREMENT] [COMMENT &amp;lt;comment&amp;gt;] [CHARACTER SET &amp;lt;charset&amp;gt;] [COLLATE &amp;lt;collate&amp;gt;] [UNSIGNED], [field_name data_type]... [PRIMARY KEY</description>
    </item>
    
    <item>
      <title>MySQL UPDATE、DELETE 与 TRUNCATE 的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/mysql-updatedelete-%E4%B8%8E-truncate-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 31 Oct 2019 10:39:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/mysql-updatedelete-%E4%B8%8E-truncate-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 UPDATE 语句的使用 注意：UPDATE 语句的使用一定要小心，因为一不小心你可能就更新了表中的所有数据。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description>
    </item>
    
    <item>
      <title>MySQL INSERT 与 REPLACE 的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/mysql-insert-%E4%B8%8E-replace-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 31 Oct 2019 10:05:58 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/mysql-insert-%E4%B8%8E-replace-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 INSERT 语句的使用 1.1 插入单条数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 查看表结构 mysql&amp;gt; SELECT * FROM prods; +----+------------+ | id | prod_name | +----+------------+ | 1 | apple | | 2 | banana | | 3</description>
    </item>
    
    <item>
      <title>MySQL 中的连接查询</title>
      <link>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 30 Oct 2019 14:02:29 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</guid>
      <description>1 交叉连接：CROSS JOIN 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 交叉连接使用这个数据表 mysql&amp;gt; SELECT * FROM orders; +----+---------+ | id | cust_id | +----+---------+ | 1 | 1 | | 2 | NULL | +----+---------+ mysql&amp;gt; SELECT * FROM customers; +----+-----------------+---------------+ | id</description>
    </item>
    
    <item>
      <title>MySQL 中子查询的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 30 Oct 2019 10:43:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 测试用例使用的数据表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # 客户表，存储客户的信息 mysql&amp;gt; SELECT * FROM</description>
    </item>
    
    <item>
      <title>MySQL 中的聚集函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/29/mysql-%E4%B8%AD%E7%9A%84%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 29 Oct 2019 11:08:19 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/29/mysql-%E4%B8%AD%E7%9A%84%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 MySQL 中的聚集函数 函数 说明 AVG([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列的平均值 COUNT([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列的行数 MAX(&amp;lt;field&amp;gt;) 返回某列的最大值 MIN(&amp;lt;field&amp;gt;) 返回某列的最小值 SUM([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列值之和 DISTINCT 参数起到去</description>
    </item>
    
    <item>
      <title>MySQL 数值处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/29/mysql-%E6%95%B0%E5%80%BC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 29 Oct 2019 10:04:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/29/mysql-%E6%95%B0%E5%80%BC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 数值处理函数 函数 说明 Abs(&amp;lt;number&amp;gt;) 返回一个数的绝对值 Exp(&amp;lt;number&amp;gt;) 返回一个数的指数值，等同于 \(e^{[number]}\) Mod(&amp;lt;number1&amp;gt;, &amp;lt;number2&amp;gt;) 返回除操作的余数 Pi() 返回圆周率 Rand() 返回一个随机数，范围在 [0,1) Cos(&amp;lt;number&amp;gt;) 返回一个</description>
    </item>
    
    <item>
      <title>程序员的标准与要求</title>
      <link>https://zhixiangyuan.github.io/2019/10/29/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%A0%87%E5%87%86%E4%B8%8E%E8%A6%81%E6%B1%82/</link>
      <pubDate>Tue, 29 Oct 2019 09:51:52 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/29/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%A0%87%E5%87%86%E4%B8%8E%E8%A6%81%E6%B1%82/</guid>
      <description>1 初级程序员 仅能完成简单模块和项目的开发工作，难以胜任复杂模块的开发。通常是入行不久， 1 年及以下工作经验的同学。 1.1 能力要求 熟悉前端基础知识如</description>
    </item>
    
    <item>
      <title>MySQL 日期和时间处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 28 Oct 2019 20:37:26 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 日期和时间处理函数 函数 说明 Date(&amp;lt;field&amp;gt;) 返回日期时间的日期部分 Time(&amp;lt;field&amp;gt;) 返回一个日期时间的时间部分 Year(&amp;lt;field&amp;gt;) 返回一个日期的年份部分 Month(&amp;lt;field&amp;gt;) 返回一个日期的月份部分 Day(&amp;lt;field&amp;gt;) 返回一个日</description>
    </item>
    
    <item>
      <title>MySQL 控制以及查看状态的命令</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%8E%A7%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 28 Oct 2019 18:19:32 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%8E%A7%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
      <description>1 一组 SHOW 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64</description>
    </item>
    
    <item>
      <title>MySQL 文本处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 28 Oct 2019 15:32:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 文本处理函数 函数 说明 Left(&amp;lt;field&amp;gt;, &amp;lt;length&amp;gt;) 返回字符串左边的字符 Right(&amp;lt;field&amp;gt;, &amp;lt;length&amp;gt;) 返回字符串右边的字符 Length(&amp;lt;field&amp;gt;) 返回字符串的长度 Locate(&amp;lt;subStr&amp;gt;, &amp;lt;field&amp;gt;) 找出字符串的一个子串 Lower(&amp;lt;field&amp;gt;) 将字符串转换为小写 Upper(&amp;lt;field&amp;gt;) 将字符</description>
    </item>
    
    <item>
      <title>MySQL SELECT 的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-select-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 28 Oct 2019 09:53:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-select-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 SELECT 命令浅析 1 2 3 4 5 6 7 8 9 10 # 检索单列数据 mysql&amp;gt; SELECT &amp;lt;field&amp;gt; FROM &amp;lt;table&amp;gt;; # 检索多列数据，列与列之间用 &amp;#39;,&amp;#39; 隔开即可 # 注意：最后一个列名后面不需要加逗号 mysql&amp;gt; SELECT &amp;lt;field&amp;gt;,&amp;lt;field&amp;gt; FROM &amp;lt;table&amp;gt;;</description>
    </item>
    
    <item>
      <title>Redis 中的数据结构</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/redis-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 27 Oct 2019 13:06:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/redis-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>1 Redis 中的数据结构 redis 中的数据结构是 key value 形式的，key 是字符串，value 有五种数据结构 string list hash set sorted set 2 Redis 中底层的数据结构 简单动态字符串（SDS）</description>
    </item>
    
    <item>
      <title>MySQL 三大引擎</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/mysql-%E4%B8%89%E5%A4%A7%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sun, 27 Oct 2019 11:16:36 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/mysql-%E4%B8%89%E5%A4%A7%E5%BC%95%E6%93%8E/</guid>
      <description>MySQL 常用的引擎有 InnoDB、MyISAM、Memory，默认是 InnoDB 1 InnoDB 这种引擎序列化在磁盘中，支持事务，支持行级锁，B+Tree 索引。拥有良好</description>
    </item>
    
    <item>
      <title>SSL 加密流程简述</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/ssl-%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Sun, 27 Oct 2019 10:51:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/ssl-%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</guid>
      <description>SSL 加密的思想运用到了对称加密和非对称加密，非堆成加密的优势在于没有私钥则无法解密，所以想要传输信息的一端只需要拿到公钥就可以完成加密传输，但</description>
    </item>
    
    <item>
      <title>Http 协议格式</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/http-%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 27 Oct 2019 10:01:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/http-%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F/</guid>
      <description>1 HTTP 请求报文 HTTP 请求报文由请求行、请求头部、空行和请求包体 4 个部分组成，如下图所示： 1.1 请求行 请求行由方法字段、URL 字段和 HTTP 协议版本字段 3 个部</description>
    </item>
    
    <item>
      <title>Java 中的类加载器</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/java-%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Sat, 26 Oct 2019 21:55:24 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/java-%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>Java 中的类加载器分为三种： 启动类加载器 扩展类加载器 应用程序类加载器 1 启动类加载器 Bootstrap ClassLoader，C 语言实现，用于加载 JDK\jre\lib\rt.jar 2 扩展类加载器</description>
    </item>
    
    <item>
      <title>类的加载过程</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 26 Oct 2019 21:54:10 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>类的加载分为以下五个步骤： 加载 连接 初始化 使用 卸载 1 加载 加载操作会去加载类的二进制数据到内存中，然后在堆中开辟出一个 java.lang.Class 对象 2 连接 连接又包含三个</description>
    </item>
    
    <item>
      <title>JVM 内存模型</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 26 Oct 2019 21:42:18 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM 的内存模型分为主内存和线程的工作内存两大块，这属于一个抽象的内存模型，用于解决并发问题，与 JVM 中的内存结构如堆、栈没什么关系，不要弄混。 参考</description>
    </item>
    
    <item>
      <title>字符串常量池</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <pubDate>Sat, 26 Oct 2019 21:23:31 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <description>JVM 为了提高性能和减少内存开销，实现数据共享，所以引入了字符串常量池。字符串常量池存在于方法区当中，创建字符串常量时，首先判断字符串是否存在于</description>
    </item>
    
    <item>
      <title>JVM 堆内存中的结构</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 26 Oct 2019 20:43:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description>1 堆内存结构 堆内存中分为三块，分别是年轻代、老年代和方法区，Java 堆不需要连续的内存，可以动态增加内存，增加失败则抛出 OutOfMemoryError 异常 1.1 年轻代与老年</description>
    </item>
    
    <item>
      <title>常见的垃圾回收算法</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 26 Oct 2019 20:34:00 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</guid>
      <description>1 标记清除算法 标记清除算法有两个阶段，标记阶段和回收阶段。标记阶段将需要被清除的对象打上标签，回收阶段完成对于对象的回收。这种算法回收过后会</description>
    </item>
    
    <item>
      <title>常见垃圾回收器</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Sat, 26 Oct 2019 20:29:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>Serial Garbage Collector: 单线程 GC Parallel Garbage Collector: 多线程 GC CMS Garbage Collector: 多线程 GC G1 Garbage Collector: jdk7 引进的 GC 优点：多线程运行，适合高并发场景，暂停时间短 目标：逐步取代 CMS GC</description>
    </item>
    
    <item>
      <title>JVM 中如何判断对象生死</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/jvm-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%94%9F%E6%AD%BB/</link>
      <pubDate>Sat, 26 Oct 2019 20:06:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/jvm-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%94%9F%E6%AD%BB/</guid>
      <description>1 引用器计数法 如果某个引用被别的引用引用一次，那么引用计数器就加一，引用计数器为 0 时便回收对象。 这种方法有缺陷，如果出现循环引用，那么 GC 便无</description>
    </item>
    
    <item>
      <title>RabbitMQ 的四种交换机类型</title>
      <link>https://zhixiangyuan.github.io/2019/10/26/rabbitmq-%E7%9A%84%E5%9B%9B%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 26 Oct 2019 11:09:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/26/rabbitmq-%E7%9A%84%E5%9B%9B%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B/</guid>
      <description>消息在 RabbitMQ 中的运动流程是先从生产者推送消息到交换机，交换机再将消息路由到队列，最后消费者消费队列中的消息。 RabbitMQ 的交换机类型分为四种： 扇形交换机：</description>
    </item>
    
    <item>
      <title>一条好用的 Git 别名命令</title>
      <link>https://zhixiangyuan.github.io/2019/10/25/%E4%B8%80%E6%9D%A1%E5%A5%BD%E7%94%A8%E7%9A%84-git-%E5%88%AB%E5%90%8D%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 25 Oct 2019 13:32:41 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/25/%E4%B8%80%E6%9D%A1%E5%A5%BD%E7%94%A8%E7%9A%84-git-%E5%88%AB%E5%90%8D%E5%91%BD%E4%BB%A4/</guid>
      <description>1 2 $&amp;gt; git config --global alias.loginfo &amp;#34;log --pretty=format:&amp;#39;%C(auto) %h | %ai | %Cred %an %Cgreen %s %C(auto) %d&amp;#39; --date=local&amp;#34; # 使用时输入 git loginfo 该命令是对于 git log 界面的格式化，格式化之后显示效果看起来更舒服，下图是命令执行过后看起</description>
    </item>
    
    <item>
      <title>Java 中的桥接方法</title>
      <link>https://zhixiangyuan.github.io/2019/10/23/java-%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 23 Oct 2019 10:40:51 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/23/java-%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95/</guid>
      <description>先看下面的接口与接口实现 1 2 3 4 5 6 7 8 9 10 public interface AInterface&amp;lt;T&amp;gt; { void func(T t); } public class AClass implements AInterface&amp;lt;String&amp;gt; { @Override public void func(String s) { System.out.println(s); } } 由于 Java 的泛型是要擦除的，所以当虚拟机看到的时候其实</description>
    </item>
    
    <item>
      <title>XPath 解析器示例</title>
      <link>https://zhixiangyuan.github.io/2019/10/22/xpath-%E8%A7%A3%E6%9E%90%E5%99%A8%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 22 Oct 2019 16:25:33 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/22/xpath-%E8%A7%A3%E6%9E%90%E5%99%A8%E7%A4%BA%E4%BE%8B/</guid>
      <description>1 XPath 解析器示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63</description>
    </item>
    
    <item>
      <title>MyBatis 源码结构</title>
      <link>https://zhixiangyuan.github.io/2019/10/22/mybatis-%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 22 Oct 2019 10:34:21 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/22/mybatis-%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/</guid>
      <description>1 MyBatis 整体架构 MyBatis 的整体架构分为三层： 基础支持层 核心处理层 接口层 三层结构如下图所示： MyBatis 源码包结构： 1.1 基础支持层 基础支持层，包含整个 MyBatis 的基础模块，</description>
    </item>
    
    <item>
      <title>RabbitMQ 客户端开发向导</title>
      <link>https://zhixiangyuan.github.io/2019/10/21/rabbitmq-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%90%91%E5%AF%BC/</link>
      <pubDate>Mon, 21 Oct 2019 11:12:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/21/rabbitmq-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%90%91%E5%AF%BC/</guid>
      <description>1 引入依赖 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.rabbitmq&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;amqp-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.4.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2 连接 RabbitMQ 2.1 通过给定参数来连接 1 2 3 4 5 6 7 ConnectionFactory factory = new ConnectionFactory(); factory.setUsername(&amp;#34;&amp;lt;username&amp;gt;&amp;#34;); factory.setPassword(&amp;#34;&amp;lt;password&amp;gt;&amp;#34;); factory.setVirtualHost(&amp;#34;&amp;lt;virtual_host&amp;gt;&amp;#34;); factory.setHost(&amp;#34;&amp;lt;host&amp;gt;&amp;#34;); factory.setPort(5672); Connection connection = factory.newConnection(); 2.2 通过给定 URI 的方式来连接 1 2 3 4 5 ConnectionFactory factory =</description>
    </item>
    
    <item>
      <title>ThreadLocal 源码浅析</title>
      <link>https://zhixiangyuan.github.io/2019/10/18/threadlocal-%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</link>
      <pubDate>Fri, 18 Oct 2019 16:36:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/18/threadlocal-%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</guid>
      <description>ThreadLocal 用于不同线程存储不同的线程全局变量，在该线程下用 ThreadLocal 取出的值是一致的。这里先简述一下原理，然后再看代码。ThreadLocal 其实是一个 Ke</description>
    </item>
    
    <item>
      <title>缓存设计</title>
      <link>https://zhixiangyuan.github.io/2019/10/15/%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 15 Oct 2019 11:10:06 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/15/%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</guid>
      <description>1 缓存的收益和成本分析 缓存架构流程图 1.1 缓存的收益 加速读写：因为缓存通常是全内存的，而存储层通常性能不够强悍，通过缓存的使用可以有效的加速读写</description>
    </item>
    
    <item>
      <title>制作 MacOS 安装盘</title>
      <link>https://zhixiangyuan.github.io/2019/10/14/%E5%88%B6%E4%BD%9C-macos-%E5%AE%89%E8%A3%85%E7%9B%98/</link>
      <pubDate>Mon, 14 Oct 2019 15:19:45 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/14/%E5%88%B6%E4%BD%9C-macos-%E5%AE%89%E8%A3%85%E7%9B%98/</guid>
      <description>第一步，在网上或者 app store 中找到 macos 镜像，然后下载 第二步，通过命令进行制作安装盘，命令如下，输完命令等待几十分钟即可。 1 2 3 $&amp;gt; &amp;lt;安装包位置&amp;</description>
    </item>
    
    <item>
      <title>Redis 中的数据复制</title>
      <link>https://zhixiangyuan.github.io/2019/10/14/redis-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 14 Oct 2019 11:19:41 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/14/redis-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</guid>
      <description>1 数据复制 1.1 建立复制 在从节点的配置文件中加入以下配置，然后启动即可 slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt; 启动过后通过 info replication 查看节点信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>Linux 中的系统调用</title>
      <link>https://zhixiangyuan.github.io/2019/10/14/linux-%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 10:05:02 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/14/linux-%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>1 系统调用 fork: 创建进程 execve: 执行任务 waitpid: 通过将子进程的进程号传给它来了解子进程运行是否完成，是否成功 brk: 分配一块与原来堆数据连在一起的内存空间 mmap: 分配一</description>
    </item>
    
    <item>
      <title>Shell 中的字符串处理</title>
      <link>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 13 Oct 2019 19:27:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</guid>
      <description>1 字符串截取 使用 %、# 实现字符串截取 1.1 % ${variable%pattern}，这种模式时，shell 在 variable 中查找，看它是否一给的模式 pattern 结尾，</description>
    </item>
    
    <item>
      <title>Shell 中的三目运算符</title>
      <link>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sun, 13 Oct 2019 19:01:27 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>shell 中的三目运算符有四种，分别是 :-、:+、:=、:?，下面分别举例 1 :- ${var:-string} 对于这种表达式表示若 $var 为空则使用 string 替换 ${var:-string}，</description>
    </item>
    
    <item>
      <title>Redis 的持久化</title>
      <link>https://zhixiangyuan.github.io/2019/10/12/redis-%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 12 Oct 2019 16:18:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/12/redis-%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>Redis 的持久化机制分为两种，RDB 和 AOF 1 RDB RDB 是将当前进程数据生成快照保存到硬盘的过程，触发 RDB 持久化过程分为手动触发和自动触发。 1.1 触发机制 1.1.1 手动触</description>
    </item>
    
    <item>
      <title>Linux 基础 1</title>
      <link>https://zhixiangyuan.github.io/2019/10/12/linux-%E5%9F%BA%E7%A1%80-1/</link>
      <pubDate>Sat, 12 Oct 2019 13:04:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/12/linux-%E5%9F%BA%E7%A1%80-1/</guid>
      <description>useradd 1 2 3 4 5 # 新建用户 $&amp;gt; useradd &amp;lt;usrename&amp;gt; # 新建用户，并将用户加入指定的组 # 组名必须存在，否则会提示不存在 $&amp;gt; useradd &amp;lt;username&amp;gt; -g &amp;lt;groupname&amp;gt; passwd 1 2 3 4 # 更改当前用户的密码 $&amp;gt; passwd # 更</description>
    </item>
    
    <item>
      <title>Redis 客户端的管理</title>
      <link>https://zhixiangyuan.github.io/2019/10/11/redis-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 11 Oct 2019 15:06:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/11/redis-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%AE%A1%E7%90%86/</guid>
      <description>1 Jedis 的基本使用 首先引入包 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基本使用 1 2 3 4 5 6 7 8 public static void main(String[] args) { Jedis jedis = new Jedis(IP, PORT); // 后面通过 jedis 中提供的各种方法就可以直接操作 redis 了 String</description>
    </item>
    
    <item>
      <title>Redis 客户端通信协议</title>
      <link>https://zhixiangyuan.github.io/2019/10/11/redis-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 11 Oct 2019 13:30:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/11/redis-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>redis 的协议客户端通信协议称为 RESP（Redis Serialization Protocol），这种协议简单高效即能被机器解析，又能被人类识别。 1 发送命令的格式 CRLF 指的是</description>
    </item>
    
    <item>
      <title>命令行潜规则</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BD%9C%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 10 Oct 2019 16:33:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BD%9C%E8%A7%84%E5%88%99/</guid>
      <description>本文所述的内容适用于本博客的标记方式 符号 含义 尖括号 &amp;lt;&amp;gt; 必选参数，实际使用时应将其替换为所需要的参数 方括号 [] 可选参数，实际使用时应将其替换为所需</description>
    </item>
    
    <item>
      <title>Redis 中的 GEO 功能</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-geo-%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 10 Oct 2019 15:38:27 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-geo-%E5%8A%9F%E8%83%BD/</guid>
      <description>通过 GEO 功能可以实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能，对于需要实现这些功能的开发者来说是一大福音。 1 命令 1.1 添加地理位置信息 geoadd &amp;lt;key&amp;gt;</description>
    </item>
    
    <item>
      <title>Redis 中的发布订阅模式</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 10 Oct 2019 15:04:46 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>redis 提供发布消息、订阅消息、取消订阅、按照模式订阅和取消订阅和查阅订阅的功能 1 命令 1.1 发布消息 publish &amp;lt;channel&amp;gt; &amp;lt;message&amp;gt; 1 2 3 # 下面的命令向 channel:sports 频道发布一条消息 &amp;#34;Tim won the</description>
    </item>
    
    <item>
      <title>Redis 中的 HyperLogLog</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-hyperloglog/</link>
      <pubDate>Thu, 10 Oct 2019 14:22:00 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-hyperloglog/</guid>
      <description>HyperLogLog 并不是数据结构而是一种基数算法，通过 HyperLogLog 可以利用极小的内存空间完成独立总数的统计，数据集可以是 IP、Email、ID 等。HyperLogLo</description>
    </item>
    
    <item>
      <title>Redis 中的 Bitmaps</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-bitmaps/</link>
      <pubDate>Thu, 10 Oct 2019 12:47:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-bitmaps/</guid>
      <description>1 存储 bitmap 的数据结构 其实就是普通的 string，只不过可以通过 bitmap 来操作二进制位为 0 或 1，比如说下面这个例子 1 2 3 4 5 6 7 8 # 先设置一个键值对 $redis-cli&amp;gt;set</description>
    </item>
    
    <item>
      <title>Redis 中的 Pipeline</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-pipeline/</link>
      <pubDate>Thu, 10 Oct 2019 10:45:25 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/redis-%E4%B8%AD%E7%9A%84-pipeline/</guid>
      <description>1 为什么要有 pipeline 要了解这个问题首先需要了解 redis 性能瓶颈在哪里，其实，redis 性能问题很多时候在网络传输上，我来计算一下为什么会这样。首先 redis 客户</description>
    </item>
    
    <item>
      <title>Redis 提供的命令行工具</title>
      <link>https://zhixiangyuan.github.io/2019/10/09/redis-%E6%8F%90%E4%BE%9B%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 09 Oct 2019 18:33:21 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/09/redis-%E6%8F%90%E4%BE%9B%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>1 redis-server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 直接运行 $&amp;gt; redis-server # 可以在后面指定配置然后运行 $&amp;gt; redis-server --configKey1 configValue1 --configKey2 configValue2 # 比如说修改端口号 $&amp;gt; redis-server --port 4500 # 指定配置文件启动 $&amp;gt; redis-server</description>
    </item>
    
    <item>
      <title>Redis 慢查询相关配置与命令</title>
      <link>https://zhixiangyuan.github.io/2019/10/09/redis-%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 09 Oct 2019 17:54:45 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/09/redis-%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</guid>
      <description>1 相关配置 配置有两个，分别是 slowlog-log-slower-than 和 slowlog-max-len，两个配置的含义如下 slowlog-log-slower-than: 超过这个时间的查询为慢查询，时间单位为微秒 slowlog-max-len: 保存的慢查询</description>
    </item>
    
    <item>
      <title>布偶猫的颜色花纹分类</title>
      <link>https://zhixiangyuan.github.io/2019/10/07/%E5%B8%83%E5%81%B6%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%E8%8A%B1%E7%BA%B9%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 07 Oct 2019 17:23:57 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/07/%E5%B8%83%E5%81%B6%E7%8C%AB%E7%9A%84%E9%A2%9C%E8%89%B2%E8%8A%B1%E7%BA%B9%E5%88%86%E7%B1%BB/</guid>
      <description>影响布偶猫的外形主要有三个因素，分别是颜色、色块位置、是否有山猫纹，下面一一举例 1 颜色分类 颜色大的方向分为黑色系、巧克力色系、红色系、玳瑁色</description>
    </item>
    
    <item>
      <title>路西法效应</title>
      <link>https://zhixiangyuan.github.io/2019/10/06/%E8%B7%AF%E8%A5%BF%E6%B3%95%E6%95%88%E5%BA%94/</link>
      <pubDate>Sun, 06 Oct 2019 12:51:54 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/06/%E8%B7%AF%E8%A5%BF%E6%B3%95%E6%95%88%E5%BA%94/</guid>
      <description>1 环境使人走向邪恶的七步 无意中迈出的第一步 对他人去人性化 对自己去个体化 推卸个人责任 盲目服从权威 不加批判的遵从群体规范 对恶行为袖手旁观，消极容</description>
    </item>
    
    <item>
      <title>谈论行业的文章汇总</title>
      <link>https://zhixiangyuan.github.io/2019/10/05/%E8%B0%88%E8%AE%BA%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 05 Oct 2019 21:46:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/05/%E8%B0%88%E8%AE%BA%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</guid>
      <description>1 浅谈程序员的行业选择 &amp;mdash; 程序人生 该文章中将行业分为了互联网、甲方、乙方和游戏，同时，互联网又被分成传统互联网和移动互联网。对于互联网企业，文</description>
    </item>
    
    <item>
      <title>Class 方法之 forName(String className) 小记</title>
      <link>https://zhixiangyuan.github.io/2019/10/04/class-%E6%96%B9%E6%B3%95%E4%B9%8B-fornamestring-classname-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 04 Oct 2019 20:29:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/04/class-%E6%96%B9%E6%B3%95%E4%B9%8B-fornamestring-classname-%E5%B0%8F%E8%AE%B0/</guid>
      <description>Class.forName(String className) 这个方法的作用就是触发类的初始化动作 1 2 public static Class&amp;lt;?&amp;gt; forName(String className) throws ClassNotFoundException 这个方法目前就仅在 JDBC 的初始化的时候见过，他的目的就是触发 JDBC 驱动注册到代码中，代码如</description>
    </item>
    
    <item>
      <title>Vim 命令小记</title>
      <link>https://zhixiangyuan.github.io/2019/09/25/vim-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 25 Sep 2019 09:54:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/25/vim-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 移动命令 1.1 行间搜索移动 f${char} 移动到 char 字符的第一个字母上 t${char} 移动到 char 字符的第一个字母前面 &amp;rsquo;;&amp;rsquo; 配合 f 和 t 搜索该行的下一个 &amp;rsquo;,&amp;rsquo; 配合 f 和 t 搜索该行的上一个 1.2</description>
    </item>
    
    <item>
      <title>Monitorenter 与 Monitorexit 小记</title>
      <link>https://zhixiangyuan.github.io/2019/09/23/monitorenter-%E4%B8%8E-monitorexit-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 23 Sep 2019 10:07:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/23/monitorenter-%E4%B8%8E-monitorexit-%E5%B0%8F%E8%AE%B0/</guid>
      <description>首先对如下代码进行编译 1 2 3 4 5 public void Test() { synchronized(this) { System.out.println(); } } 将得到的字节码通过 javap 反编译 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public void</description>
    </item>
    
    <item>
      <title>Ant 风格路径表达式</title>
      <link>https://zhixiangyuan.github.io/2019/09/22/ant-%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 22 Sep 2019 10:57:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/22/ant-%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Ant 风格路径表达式就是一个精简版的正则表达式 通配符 说明 ? 匹配任何单字符 * 匹配 0 或者任意数量的字符 ** 匹配 0 或者更多的目录</description>
    </item>
    
    <item>
      <title>如何在 Spring 的 Yml 中使用随机数与字符串</title>
      <link>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-spring-%E7%9A%84-yml-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 19 Sep 2019 17:31:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-spring-%E7%9A%84-yml-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>占位符 描述 ${random.value} 取得随机字符串 ${random.int} 取得随机 int 型数据 ${random.long} 取得随机 long 型数据 ${random.int(10)} 取得 10 以内的随机数 ${random.int[10,20]} 取得 10~20 的随机数 ${自定义占位符 or 环境变量} 自定义占位符 or</description>
    </item>
    
    <item>
      <title>如何在 Leetcode 上调试代码</title>
      <link>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 19 Sep 2019 09:39:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</guid>
      <description>最近经常在 leetcode 上面刷题，不过发现在上面写的代码如果遇到一些 bug 只能肉眼 debug，如果 不能肉眼 debug 出来就比较难受了，还要打开 ide 真实模拟一下。不过今</description>
    </item>
    
    <item>
      <title>ArrayList 使用注意事项</title>
      <link>https://zhixiangyuan.github.io/2019/09/18/arraylist-%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 18 Sep 2019 18:24:57 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/18/arraylist-%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>1 ArrayList 使用注意事项 如果一边对 ArrayList 中的元素做修改，一边使用 Iterator 对 ArrayList 进行遍历，则会抛出 ConcurrentModificationException 异常。 2 为什么会出现 ConcurrentModificationException 这个异常 通过翻看源码，能够找到下面这段代</description>
    </item>
    
    <item>
      <title>如何介绍一个集合类</title>
      <link>https://zhixiangyuan.github.io/2019/09/18/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%B1%BB/</link>
      <pubDate>Wed, 18 Sep 2019 16:02:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/18/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%B1%BB/</guid>
      <description>很多时候，作为一个程序员，仅仅会使用集合类是不够的，我们经常需要向别人介绍集合类，那么，在向别人介绍集合类的时候，我们应该从哪几个角度进行介</description>
    </item>
    
    <item>
      <title>临床中的急性肾功能损伤 Akl 可以通过什么指标预警</title>
      <link>https://zhixiangyuan.github.io/2019/09/17/%E4%B8%B4%E5%BA%8A%E4%B8%AD%E7%9A%84%E6%80%A5%E6%80%A7%E8%82%BE%E5%8A%9F%E8%83%BD%E6%8D%9F%E4%BC%A4-akl-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%8C%87%E6%A0%87%E9%A2%84%E8%AD%A6/</link>
      <pubDate>Tue, 17 Sep 2019 20:25:18 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/17/%E4%B8%B4%E5%BA%8A%E4%B8%AD%E7%9A%84%E6%80%A5%E6%80%A7%E8%82%BE%E5%8A%9F%E8%83%BD%E6%8D%9F%E4%BC%A4-akl-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%8C%87%E6%A0%87%E9%A2%84%E8%AD%A6/</guid>
      <description>如果在临床中出现急性肾功能损伤即 Akl（下文均以 Akl 作为替代），那么会导致尿量减少甚至无尿，而由于体液的增加，会导致血钾和电解质紊乱，心电 T 波</description>
    </item>
    
    <item>
      <title>Object 中 hashcode() 与 equals() 的关系</title>
      <link>https://zhixiangyuan.github.io/2019/09/17/object-%E4%B8%AD-hashcode-%E4%B8%8E-equals-%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Tue, 17 Sep 2019 17:14:02 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/17/object-%E4%B8%AD-hashcode-%E4%B8%8E-equals-%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>情况分为以下四种： hashcode 相等，equals 可能相等 hashcode 不相等，equals 一定不相等 equals 相等，hashcode 一定相等 equals 相等说明是同一个对象，所以 hashcode</description>
    </item>
    
    <item>
      <title>Java Byte &amp; 0xFF 的作用</title>
      <link>https://zhixiangyuan.github.io/2019/09/16/java-byte-0xff-%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Mon, 16 Sep 2019 14:40:00 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/16/java-byte-0xff-%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>Java 代码中，经常能够见到 byte &amp;amp; 0xFF 这串代码，这是由于 Java 在处理 byte 的时候，将 byte 当作有符号来处理，所以比如说我们要进行 byte &amp;lt;&amp;lt; 8，如果 byte 的第一位为 0，那么在</description>
    </item>
    
    <item>
      <title>MyBatis Plugin 使用案例</title>
      <link>https://zhixiangyuan.github.io/2019/09/10/mybatis-plugin-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Tue, 10 Sep 2019 07:34:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/10/mybatis-plugin-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>MyBatis 插件，实现功能的插件又可称之为拦截器，主要提供对 org.apache.ibatis.executor.Executor、org.apach</description>
    </item>
    
    <item>
      <title>MyBatis ObjectFactory 使用案例</title>
      <link>https://zhixiangyuan.github.io/2019/09/10/mybatis-objectfactory-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Tue, 10 Sep 2019 07:02:15 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/10/mybatis-objectfactory-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂来完成。默认的对象工厂仅仅是实例化目标类，要么通过默认构造方法，要么在构造方法上参数映射</description>
    </item>
    
    <item>
      <title>MyBatis TypeHandler 使用案例</title>
      <link>https://zhixiangyuan.github.io/2019/09/09/mybatis-typehandler-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 09 Sep 2019 07:20:41 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/09/mybatis-typehandler-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>数据库的数据类型与 Java 中的数据类型存在差异，当需要对两者做特定的转换时，MyBatis 提供了 TypeHandler 来实现转换操作，以下是一个实际案例，通过将 Java 中的</description>
    </item>
    
    <item>
      <title>CAP 简述</title>
      <link>https://zhixiangyuan.github.io/2019/08/23/cap-%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Fri, 23 Aug 2019 14:08:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/23/cap-%E7%AE%80%E8%BF%B0/</guid>
      <description>CAP 理论是 1998 年，加州大学的计算机科学家 EricBrewer 提出，其中包含三个指标 Consistency Availability Partition tolerance 1 Consistency 一致性 指的是所有数据在同一时刻看到的数据是一致的 all nodes see the same data at the same time</description>
    </item>
    
    <item>
      <title>Equals 方法的重写规则</title>
      <link>https://zhixiangyuan.github.io/2019/08/09/equals-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 09 Aug 2019 09:24:19 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/09/equals-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99/</guid>
      <description>equals 方法有一些固定的规则，一些类（例如集合类）会按照规则使用 equals 方法，如果重写的时候不按照这些规则进行重写，那么在使用的时候就可能出现莫名其妙的</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor 解析</title>
      <link>https://zhixiangyuan.github.io/2019/08/06/threadpoolexecutor-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 06 Aug 2019 17:26:17 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/06/threadpoolexecutor-%E8%A7%A3%E6%9E%90/</guid>
      <description>1 ThreadPoolExecutor 的构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public ThreadPoolExecutor( // 核心线程数，默认不会被回收掉，但是如果设置了 allowCoreThreadTimeOut //</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 中的五种断点</title>
      <link>https://zhixiangyuan.github.io/2019/08/05/intellij-idea-%E4%B8%AD%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%AD%E7%82%B9/</link>
      <pubDate>Mon, 05 Aug 2019 16:18:58 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/05/intellij-idea-%E4%B8%AD%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%AD%E7%82%B9/</guid>
      <description>IntelliJ IDEA 中存在四种断点，分别是行断点、条件断点、方法断点、异常断点、字段观察断点，下面来一一介绍。 1 行断点 行断点，顾名思义，当代码走到断点行的时</description>
    </item>
    
    <item>
      <title>数组的协变与范型的协变</title>
      <link>https://zhixiangyuan.github.io/2019/08/01/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8D%8F%E5%8F%98%E4%B8%8E%E8%8C%83%E5%9E%8B%E7%9A%84%E5%8D%8F%E5%8F%98/</link>
      <pubDate>Thu, 01 Aug 2019 16:02:28 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/01/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8D%8F%E5%8F%98%E4%B8%8E%E8%8C%83%E5%9E%8B%E7%9A%84%E5%8D%8F%E5%8F%98/</guid>
      <description>Java 中的数组是支持协变的，而范型不支持协变，先通过下面的代码了解什么是协变。 1 2 3 4 5 6 7 8 9 10 11 12 13 public static void main(String[] args) { // Number 数组可以指向 Integer 数组 // 这就</description>
    </item>
    
    <item>
      <title>父类如何返回子类</title>
      <link>https://zhixiangyuan.github.io/2019/08/01/%E7%88%B6%E7%B1%BB%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E5%AD%90%E7%B1%BB/</link>
      <pubDate>Thu, 01 Aug 2019 14:59:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/01/%E7%88%B6%E7%B1%BB%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E5%AD%90%E7%B1%BB/</guid>
      <description>以 netty 的 AbstractBootstrap 为例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // 1. 父类中定义一个继承自己的范型 B. B extends AbstractBootstrap&amp;lt;B&amp;gt; public abstract class AbstractBootstrap&amp;lt;B extends AbstractBootstrap&amp;lt;B&amp;gt;&amp;gt;{ ... public B method1() { return self(); } public B method2() { return</description>
    </item>
    
    <item>
      <title>由无效缓存引起的内存泄漏</title>
      <link>https://zhixiangyuan.github.io/2019/07/30/%E7%94%B1%E6%97%A0%E6%95%88%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
      <pubDate>Tue, 30 Jul 2019 20:36:52 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/30/%E7%94%B1%E6%97%A0%E6%95%88%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid>
      <description>在下面这段代码中存在一个内存泄漏的问题，在使用中表现为性能下降，在极端情况下甚至可能出现 OutOfMemoryError。先看代码，看你是否</description>
    </item>
    
    <item>
      <title>ReentrantLock 详解</title>
      <link>https://zhixiangyuan.github.io/2019/07/24/reentrantlock-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 24 Jul 2019 21:31:26 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/24/reentrantlock-%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文基于 JDK 1.8 1 ReentrantLock 的作用 Java 中已经有了 synchronized 的来进行隐式的加锁和解锁，那还为什么还要引入 ReentrantLock 这把锁呢。这主要是 synchronized 的加锁和解锁操作并不灵活，Reentr</description>
    </item>
    
    <item>
      <title>Unsafe 解析</title>
      <link>https://zhixiangyuan.github.io/2019/07/23/unsafe-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 23 Jul 2019 20:29:17 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/23/unsafe-%E8%A7%A3%E6%9E%90/</guid>
      <description>本文基于 jdk1.8 Unsafe 位于 sun.misc 包下，提供能直接访问系统内存资源的方法，使得用户能够自主管理内存，使用得当能够提升程序的运行效率。 1 如何获取 Unsafe 实例 下面代码</description>
    </item>
    
    <item>
      <title>Java 线程的生命周期</title>
      <link>https://zhixiangyuan.github.io/2019/07/21/java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Sun, 21 Jul 2019 20:09:56 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/21/java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Java 语言中的线程本质上就是操作系统的线程，Java 创建线程同样是调用操作系统的 API 来创建线程。所以，了解 Java 线程的生命周期的第一步是了解操作系统线</description>
    </item>
    
    <item>
      <title>关于学习</title>
      <link>https://zhixiangyuan.github.io/2019/07/17/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 17 Jul 2019 20:55:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/17/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0/</guid>
      <description>学一个东西，一般从三个角度思考，what、how、why 1 比如说计算机协议 从 what 的角度，所学的是一个什么样的协议，这种协议有怎样的特性，能够解</description>
    </item>
    
    <item>
      <title>通过银行转账问题解说死锁解决方案</title>
      <link>https://zhixiangyuan.github.io/2019/07/17/%E9%80%9A%E8%BF%87%E9%93%B6%E8%A1%8C%E8%BD%AC%E8%B4%A6%E9%97%AE%E9%A2%98%E8%A7%A3%E8%AF%B4%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 17 Jul 2019 09:26:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/17/%E9%80%9A%E8%BF%87%E9%93%B6%E8%A1%8C%E8%BD%AC%E8%B4%A6%E9%97%AE%E9%A2%98%E8%A7%A3%E8%AF%B4%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>1 如何解决银行转账时的并发问题 当出现 A 将钱转给 B 的时候，什么样的方案可以避免在转账时没有并发问题。先看以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Java 解决可见性和有序性问题的方法</title>
      <link>https://zhixiangyuan.github.io/2019/07/16/java-%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 16 Jul 2019 17:24:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/16/java-%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>1 Happens-Before 规则 Java 通过提出 Happens-Before 规则来解决可见性和有序性的问题，Happens-Before 的意思是前面一个操作的结果对后续操作是可见的。 1.1 程序的顺序性</description>
    </item>
    
    <item>
      <title>信息的获取方式</title>
      <link>https://zhixiangyuan.github.io/2019/07/16/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 16 Jul 2019 15:38:16 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/16/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</guid>
      <description>信息的获取方式主要分为四种 1 搜索引擎 基本上，碰到的问题都可以先上搜索引擎找一找，如果找不到，再考虑别的渠道，如果能找到就不要再去问别人，浪费</description>
    </item>
    
    <item>
      <title>并发编程需要解决的问题</title>
      <link>https://zhixiangyuan.github.io/2019/07/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 16 Jul 2019 10:08:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>1 并发编程需要解决的问题 由于 CPU 从单核变成了多核引发了并发问题，其问题有三。一，每个 CPU 都有自己的缓存，当多个线程运行在不同核的 CPU 上并且修改同一</description>
    </item>
    
    <item>
      <title>TCP：连接的建立与断开</title>
      <link>https://zhixiangyuan.github.io/2019/07/12/tcp%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/</link>
      <pubDate>Fri, 12 Jul 2019 21:22:03 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/12/tcp%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/</guid>
      <description>1 TCP 连接的建立 注：下述序号用 seq 表示 A 生成一个 TCP 数据包，包中 SYN = 1，seq = x，然后将包发给 B 此报文不能携带数据 B 收到包之后，生成一个 SYN = 1，</description>
    </item>
    
    <item>
      <title>TCP：首部结构</title>
      <link>https://zhixiangyuan.github.io/2019/07/12/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 12 Jul 2019 15:05:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/12/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</guid>
      <description>1 TCP 数据在 IP 数据报中的封装 2 TCP 首部的数据格式 TCP 首部的数据结构，如果不计选项字段，首部是 20 个字节。 2.1 序号 32 位 序号是 32 位无符号数，序号范围从 0 到</description>
    </item>
    
    <item>
      <title>double 转 BigDecimal 造成的精度丢失</title>
      <link>https://zhixiangyuan.github.io/2019/07/10/double-%E8%BD%AC-bigdecimal-%E9%80%A0%E6%88%90%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Wed, 10 Jul 2019 16:07:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/10/double-%E8%BD%AC-bigdecimal-%E9%80%A0%E6%88%90%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</guid>
      <description>1 2 3 4 5 6 public static void main(String[] args) { double d1 = 36.8d; double d2 = 36.5d; BigDecimal subtract = new BigDecimal(d1).subtract(new BigDecimal(d2)); System.out.println(subtract); } 对于上述类型的计算会得到结果 0.29999999999999715782905695</description>
    </item>
    
    <item>
      <title>网际协议：IP</title>
      <link>https://zhixiangyuan.github.io/2019/07/09/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEip/</link>
      <pubDate>Tue, 09 Jul 2019 21:06:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/09/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEip/</guid>
      <description>1 网际协议 IP 简介 IP 协议提供不可靠的、无连接的数据包传输 不可靠指的是从客户端发到目标端的数据包对方可能会收不到 无连接指的是发送的每个数据包都是</description>
    </item>
    
    <item>
      <title>用户数据报协议：UDP</title>
      <link>https://zhixiangyuan.github.io/2019/07/09/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</link>
      <pubDate>Tue, 09 Jul 2019 16:12:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/09/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</guid>
      <description>1 UDP 协议简介 UDP 是一种面向数据包协议，应用层向下传递的每一次操作都会产生一个 UDP 数据包，这一个 UDP 数据包会组装成一份 IP 数据包，这里是一一对应的关系</description>
    </item>
    
    <item>
      <title>学习路径</title>
      <link>https://zhixiangyuan.github.io/2019/07/09/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Tue, 09 Jul 2019 09:26:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/09/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</guid>
      <description>1 学习路径 今天，了解到一个很有意思的词，学习路径。 学习路径在我的理解当中，便是沿着若干个学习目标，通过不断达成学习目标最终完成学习的过程。 光</description>
    </item>
    
    <item>
      <title>Java Gzip 的简单封装</title>
      <link>https://zhixiangyuan.github.io/2019/07/04/java-gzip-%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</link>
      <pubDate>Thu, 04 Jul 2019 14:50:20 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/04/java-gzip-%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</guid>
      <description>本文基于 Jdk 1.8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.util.zip.GZIPInputStream; import java.util.zip.GZIPOutputStream; public class GzipUtil { /** *</description>
    </item>
    
    <item>
      <title>Java 性能优化</title>
      <link>https://zhixiangyuan.github.io/2019/07/02/java-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 02 Jul 2019 16:22:25 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/02/java-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>1 明确是否需要优化以及要优化到什么程度 首先需要在实践中检测代码是否需要优化，如果不需要优化，那么优化可能占用大量时间，而且优化完了也不会有任</description>
    </item>
    
    <item>
      <title>一次内存泄漏排查的经历</title>
      <link>https://zhixiangyuan.github.io/2019/07/01/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Mon, 01 Jul 2019 13:14:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/01/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>开发环境: JDK: 1.8 Netty: 4.1.21.Final 1 起因 由于我之前写过一个接收医疗设备数据的项目，于是为了压力测试，就又按照该协议实现了一个发送设备数据的项目。这个项目在使</description>
    </item>
    
    <item>
      <title>求数组中间的数据个数</title>
      <link>https://zhixiangyuan.github.io/2018/12/17/%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Mon, 17 Dec 2018 23:18:57 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/12/17/%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AA%E6%95%B0/</guid>
      <description>1 求范围内的数字个数 求 0 和 4 中间的数字个数 1.1 既不包含 0，也不包含 4，即 (0,4) 4 - 0 - 1 = 3 1.2 包含 0 或 4，即 (0,4] 或是 [0,4) 4 - 0 = 4 1.3 既包含 0 又包含 4，</description>
    </item>
    
    <item>
      <title>数据库事务小记</title>
      <link>https://zhixiangyuan.github.io/2018/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sat, 24 Nov 2018 14:30:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 为什么会有数据库事务 数据库在没有事务的情况下进行读写，可能出现脏读、不可重复读与幻读三种异常，而为了解决这三种异常，便引出了数据库事务，首</description>
    </item>
    
    <item>
      <title>Javap 命令的使用</title>
      <link>https://zhixiangyuan.github.io/2018/11/05/javap-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 05 Nov 2018 10:43:36 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/11/05/javap-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>通过 javap 命令可以反编译 .class 文件，实际使用的时候 javap 后面的类名加与不加 .class 都可以。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -help --help -? 打印使用信息（也就是打印图中所示</description>
    </item>
    
    <item>
      <title>final、finally、finalize 的异同</title>
      <link>https://zhixiangyuan.github.io/2018/10/17/finalfinallyfinalize-%E7%9A%84%E5%BC%82%E5%90%8C/</link>
      <pubDate>Wed, 17 Oct 2018 16:40:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/10/17/finalfinallyfinalize-%E7%9A%84%E5%BC%82%E5%90%8C/</guid>
      <description>1 final final 可以用来修饰类、方法、变量 1.1 final 修饰类 final 修饰 class 代表类不可以被继承 1.2 final 修饰变量 final 修饰的变量在初始化之后不能被再次赋值 1.3 final 修饰方法 final 修饰方法</description>
    </item>
    
    <item>
      <title>Exception 与 Error 的异同</title>
      <link>https://zhixiangyuan.github.io/2018/10/16/exception-%E4%B8%8E-error-%E7%9A%84%E5%BC%82%E5%90%8C/</link>
      <pubDate>Tue, 16 Oct 2018 11:26:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/10/16/exception-%E4%B8%8E-error-%E7%9A%84%E5%BC%82%E5%90%8C/</guid>
      <description>Exception 和 Error 都是继承了 Throwable 类，在 Java 中只有继承了 Throwable 的类才可以被 throw 或者 catch，它是异常处理机制的基本组成类型。Exception 是程序正常运行中，可</description>
    </item>
    
    <item>
      <title>sed 小记</title>
      <link>https://zhixiangyuan.github.io/2018/10/04/sed-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 04 Oct 2018 16:21:59 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/10/04/sed-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 sed 的工作流程 sed 逐行处理文件或输入，默认不会修改文件，除非使用 shell 重定向保存结果。 工作流程： 将正在处理的行保存在一个临时缓存区中（也称为模式空</description>
    </item>
    
    <item>
      <title>grep 小记</title>
      <link>https://zhixiangyuan.github.io/2018/09/25/grep-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 25 Sep 2018 15:02:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/09/25/grep-%E5%B0%8F%E8%AE%B0/</guid>
      <description>grep -A [line num]，向下显示多少行，after-context 缩写 -B [line num]，向上显示多少行，before-context 缩写 -C [line num]，上</description>
    </item>
    
    <item>
      <title>tar &amp; scp 小记</title>
      <link>https://zhixiangyuan.github.io/2018/09/24/tar-scp-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Sep 2018 17:35:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/09/24/tar-scp-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 scp 命令 上传：scp [文件路径] [用户名]@[IP 地址]:[服务器路径] 下载：scp [用户名]@[IP 地址]:[文件路径] [本地路径] 2 tar 命</description>
    </item>
    
    <item>
      <title>HashMap 不得不说的故事</title>
      <link>https://zhixiangyuan.github.io/2018/09/03/hashmap-%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</link>
      <pubDate>Mon, 03 Sep 2018 10:13:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/09/03/hashmap-%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</guid>
      <description>本文基于 Jdk 1.8 1 什么是 HashMap 要理解这个问题，首先需要理解什么是 Hash 以及什么是 Map 1.1 什么是 Hash Hash 是一种散列算法，用于确定关键字到指定位置的对应关系 1.2 什么是</description>
    </item>
    
    <item>
      <title>int 入栈指令 iconst、bipush、sipush、ldc</title>
      <link>https://zhixiangyuan.github.io/2018/08/11/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</link>
      <pubDate>Sat, 11 Aug 2018 18:47:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/08/11/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</guid>
      <description>1 前言 本文介绍 int 数值入栈指令 iconst、bipush、sipubh、Idc。 根据 int 取值不同分为以下几种可能性： iconst: [-1, 5] bipush: [-128, -2]∪[6, 127] sipush:</description>
    </item>
    
  </channel>
</rss>