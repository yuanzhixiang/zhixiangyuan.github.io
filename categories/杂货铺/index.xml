<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂货铺 on Yuanzx Blog</title>
    <link>https://zhixiangyuan.github.io/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/</link>
    <description>Recent content in 杂货铺 on Yuanzx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Wed, 09 Oct 2019 17:54:45 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis 慢查询相关配置与命令</title>
      <link>https://zhixiangyuan.github.io/post/hovel/redis-%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 09 Oct 2019 17:54:45 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/redis-%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</guid>
      <description>1 相关配置 配置有两个，分别是 slowlog-log-slower-than 和 slowlog-max-len，两个配置的含义如下 slowlog-log-slower-than: 超过这个时间的查询为慢查询，时间单位为微秒 slowlog-max-len: 保存的慢查询</description>
    </item>
    
    <item>
      <title>路西法效应</title>
      <link>https://zhixiangyuan.github.io/post/hovel/%E8%B7%AF%E8%A5%BF%E6%B3%95%E6%95%88%E5%BA%94/</link>
      <pubDate>Sun, 06 Oct 2019 12:51:54 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/%E8%B7%AF%E8%A5%BF%E6%B3%95%E6%95%88%E5%BA%94/</guid>
      <description>1 环境使人走向邪恶的七步 无意中迈出的第一步 对他人去人性化 对自己去个体化 推卸个人责任 盲目服从权威 不加批判的遵从群体规范 对恶行为袖手旁观，消极容</description>
    </item>
    
    <item>
      <title>谈论行业的文章汇总</title>
      <link>https://zhixiangyuan.github.io/post/hovel/%E8%B0%88%E8%AE%BA%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 05 Oct 2019 21:46:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/%E8%B0%88%E8%AE%BA%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</guid>
      <description>1 浅谈程序员的行业选择 &amp;mdash; 程序人生 该文章中将行业分为了互联网、甲方、乙方和游戏，同时，互联网又被分成传统互联网和移动互联网。对于互联网企业，文</description>
    </item>
    
    <item>
      <title>Class 方法之 forName(String className) 小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/class-%E6%96%B9%E6%B3%95%E4%B9%8B-fornamestring-classname-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 04 Oct 2019 20:29:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/class-%E6%96%B9%E6%B3%95%E4%B9%8B-fornamestring-classname-%E5%B0%8F%E8%AE%B0/</guid>
      <description>Class.forName(String className) 这个方法的作用就是触发类的初始化动作 1 2 public static Class&amp;lt;?&amp;gt; forName(String className) throws ClassNotFoundException 这个方法目前就仅在 JDBC 的初始化的时候见过，他的目的就是触发 JDBC 驱动注册到代码中，代码如</description>
    </item>
    
    <item>
      <title>Vim 命令小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/vim-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 25 Sep 2019 09:54:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/vim-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 移动命令 1.1 行间搜索移动 f${char} 移动到 char 字符的第一个字母上 t${char} 移动到 char 字符的第一个字母前面 &amp;rsquo;;&amp;rsquo; 配合 f 和 t 搜索该行的下一个 &amp;rsquo;,&amp;rsquo; 配合 f 和 t 搜索该行的上一个 1.2</description>
    </item>
    
    <item>
      <title>Monitorenter 与 Monitorexit 小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/monitorenter-%E4%B8%8E-monitorexit-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 23 Sep 2019 10:07:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/monitorenter-%E4%B8%8E-monitorexit-%E5%B0%8F%E8%AE%B0/</guid>
      <description>首先对如下代码进行编译 1 2 3 4 5 public void Test() { synchronized(this) { System.out.println(); } } 将得到的字节码通过 javap 反编译 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public void</description>
    </item>
    
    <item>
      <title>Ant 风格路径表达式</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/ant-%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 22 Sep 2019 10:57:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/ant-%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Ant 风格路径表达式就是一个精简版的正则表达式 通配符 说明 ? 匹配任何单字符 * 匹配 0 或者任意数量的字符 ** 匹配 0 或者更多的目录</description>
    </item>
    
    <item>
      <title>如何在 Spring 的 Yml 中使用随机数与字符串</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E5%9C%A8-spring-%E7%9A%84-yml-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 19 Sep 2019 17:31:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E5%9C%A8-spring-%E7%9A%84-yml-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>占位符 描述 ${random.value} 取得随机字符串 ${random.int} 取得随机 int 型数据 ${random.long} 取得随机 long 型数据 ${random.int(10)} 取得 10 以内的随机数 ${random.int[10,20]} 取得 10~20 的随机数 ${自定义占位符 or 环境变量} 自定义占位符 or</description>
    </item>
    
    <item>
      <title>如何在 Leetcode 上调试代码</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 19 Sep 2019 09:39:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</guid>
      <description>最近经常在 leetcode 上面刷题，不过发现在上面写的代码如果遇到一些 bug 只能肉眼 debug，如果 不能肉眼 debug 出来就比较难受了，还要打开 ide 真实模拟一下。不过今</description>
    </item>
    
    <item>
      <title>ArrayList 使用注意事项</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/arraylist-%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 18 Sep 2019 18:24:57 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/arraylist-%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>1 ArrayList 使用注意事项 如果一边对 ArrayList 中的元素做修改，一边使用 Iterator 对 ArrayList 进行遍历，则会抛出 ConcurrentModificationException 异常。 2 为什么会出现 ConcurrentModificationException 这个异常 通过翻看源码，能够找到下面这段代</description>
    </item>
    
    <item>
      <title>如何介绍一个集合类</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%B1%BB/</link>
      <pubDate>Wed, 18 Sep 2019 16:02:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%B1%BB/</guid>
      <description>很多时候，作为一个程序员，仅仅会使用集合类是不够的，我们经常需要向别人介绍集合类，那么，在向别人介绍集合类的时候，我们应该从哪几个角度进行介</description>
    </item>
    
    <item>
      <title>临床中的急性肾功能损伤 Akl 可以通过什么指标预警</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%B8%B4%E5%BA%8A%E4%B8%AD%E7%9A%84%E6%80%A5%E6%80%A7%E8%82%BE%E5%8A%9F%E8%83%BD%E6%8D%9F%E4%BC%A4-akl-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%8C%87%E6%A0%87%E9%A2%84%E8%AD%A6/</link>
      <pubDate>Tue, 17 Sep 2019 20:25:18 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%B8%B4%E5%BA%8A%E4%B8%AD%E7%9A%84%E6%80%A5%E6%80%A7%E8%82%BE%E5%8A%9F%E8%83%BD%E6%8D%9F%E4%BC%A4-akl-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%8C%87%E6%A0%87%E9%A2%84%E8%AD%A6/</guid>
      <description>如果在临床中出现急性肾功能损伤即 Akl（下文均以 Akl 作为替代），那么会导致尿量减少甚至无尿，而由于体液的增加，会导致血钾和电解质紊乱，心电 T 波</description>
    </item>
    
    <item>
      <title>Object 中 hashcode() 与 equals() 的关系</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/object-%E4%B8%AD-hashcode-%E4%B8%8E-equals-%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Tue, 17 Sep 2019 17:14:02 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/object-%E4%B8%AD-hashcode-%E4%B8%8E-equals-%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>情况分为以下四种： hashcode 相等，equals 可能相等 hashcode 不相等，equals 一定不相等 equals 相等，hashcode 一定相等 equals 相等说明是同一个对象，所以 hashcode</description>
    </item>
    
    <item>
      <title>Java Byte &amp; 0xFF 的作用</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-byte-0xff-%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Mon, 16 Sep 2019 14:40:00 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-byte-0xff-%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>Java 代码中，经常能够见到 byte &amp;amp; 0xFF 这串代码，这是由于 Java 在处理 byte 的时候，将 byte 当作有符号来处理，所以比如说我们要进行 byte &amp;lt;&amp;lt; 8，如果 byte 的第一位为 0，那么在</description>
    </item>
    
    <item>
      <title>Mybatis Plugin 使用案例</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-plugin-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Tue, 10 Sep 2019 07:34:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-plugin-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>Mybatis 插件，实现功能的插件又可称之为拦截器，主要提供对 org.apache.ibatis.executor.Executor、org.apach</description>
    </item>
    
    <item>
      <title>Mybatis ObjectFactory 使用案例</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-objectfactory-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Tue, 10 Sep 2019 07:02:15 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-objectfactory-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>Mybatis 每次创建结果对象的新实例时，它都会使用一个对象工厂来完成。默认的对象工厂仅仅是实例化目标类，要么通过默认构造方法，要么在构造方法上参数映射</description>
    </item>
    
    <item>
      <title>Mybatis TypeHandler 使用案例</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-typehandler-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 09 Sep 2019 07:20:41 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/mybatis-typehandler-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>数据库的数据类型与 Java 中的数据类型存在差异，当需要对两者做特定的转换时，Mybatis 提供了 TypeHandler 来实现转换操作，以下是一个实际案例，通过将 Java 中的</description>
    </item>
    
    <item>
      <title>Equals 方法的重写规则</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/equals-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 09 Aug 2019 09:24:19 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/equals-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99/</guid>
      <description>equals 方法有一些固定的规则，一些类（例如集合类）会按照规则使用 equals 方法，如果重写的时候不按照这些规则进行重写，那么在使用的时候就可能出现莫名其妙的</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor 解析</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/threadpoolexecutor-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 06 Aug 2019 17:26:17 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/threadpoolexecutor-%E8%A7%A3%E6%9E%90/</guid>
      <description>1 ThreadPoolExecutor 的构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public ThreadPoolExecutor( // 核心线程数，默认不会被回收掉，但是如果设置了 allowCoreThreadTimeOut //</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 中的五种断点</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/intellij-idea-%E4%B8%AD%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%AD%E7%82%B9/</link>
      <pubDate>Mon, 05 Aug 2019 16:18:58 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/intellij-idea-%E4%B8%AD%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%AD%E7%82%B9/</guid>
      <description>IntelliJ IDEA 中存在四种断点，分别是行断点、条件断点、方法断点、异常断点、字段观察断点，下面来一一介绍。 1 行断点 行断点，顾名思义，当代码走到断点行的时</description>
    </item>
    
    <item>
      <title>数组的协变与范型的协变</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8D%8F%E5%8F%98%E4%B8%8E%E8%8C%83%E5%9E%8B%E7%9A%84%E5%8D%8F%E5%8F%98/</link>
      <pubDate>Thu, 01 Aug 2019 16:02:28 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8D%8F%E5%8F%98%E4%B8%8E%E8%8C%83%E5%9E%8B%E7%9A%84%E5%8D%8F%E5%8F%98/</guid>
      <description>Java 中的数组是支持协变的，而范型不支持协变，先通过下面的代码了解什么是协变。 1 2 3 4 5 6 7 8 9 10 11 12 13 public static void main(String[] args) { // Number 数组可以指向 Integer 数组 // 这就</description>
    </item>
    
    <item>
      <title>父类如何返回子类</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%88%B6%E7%B1%BB%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E5%AD%90%E7%B1%BB/</link>
      <pubDate>Thu, 01 Aug 2019 14:59:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%88%B6%E7%B1%BB%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E5%AD%90%E7%B1%BB/</guid>
      <description>以 netty 的 AbstractBootstrap 为例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // 1. 父类中定义一个继承自己的范型 B. B extends AbstractBootstrap&amp;lt;B&amp;gt; public abstract class AbstractBootstrap&amp;lt;B extends AbstractBootstrap&amp;lt;B&amp;gt;&amp;gt;{ ... public B method1() { return self(); } public B method2() { return</description>
    </item>
    
    <item>
      <title>由无效缓存引起的内存泄漏</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%94%B1%E6%97%A0%E6%95%88%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
      <pubDate>Tue, 30 Jul 2019 20:36:52 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%94%B1%E6%97%A0%E6%95%88%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid>
      <description>在下面这段代码中存在一个内存泄漏的问题，在使用中表现为性能下降，在极端情况下甚至可能出现 OutOfMemoryError。先看代码，看你是否</description>
    </item>
    
    <item>
      <title>ReentrantLock 详解</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/reentrantlock-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 24 Jul 2019 21:31:26 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/reentrantlock-%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文基于 JDK 1.8 1 ReentrantLock 的作用 Java 中已经有了 synchronized 的来进行隐式的加锁和解锁，那还为什么还要引入 ReentrantLock 这把锁呢。这主要是 synchronized 的加锁和解锁操作并不灵活，Reentr</description>
    </item>
    
    <item>
      <title>Unsafe 解析</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/unsafe-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 23 Jul 2019 20:29:17 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/unsafe-%E8%A7%A3%E6%9E%90/</guid>
      <description>本文基于 jdk1.8 Unsafe 位于 sun.misc 包下，提供能直接访问系统内存资源的方法，使得用户能够自主管理内存，使用得当能够提升程序的运行效率。 1 如何获取 Unsafe 实例 下面代码</description>
    </item>
    
    <item>
      <title>Java 线程的生命周期</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Sun, 21 Jul 2019 20:09:56 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Java 语言中的线程本质上就是操作系统的线程，Java 创建线程同样是调用操作系统的 API 来创建线程。所以，了解 Java 线程的生命周期的第一步是了解操作系统线</description>
    </item>
    
    <item>
      <title>关于学习</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 17 Jul 2019 20:55:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0/</guid>
      <description>学一个东西，一般从三个角度思考，what、how、why 1 比如说计算机协议 从 what 的角度，所学的是一个什么样的协议，这种协议有怎样的特性，能够解</description>
    </item>
    
    <item>
      <title>如何解决银行转账时的并发问题</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%93%B6%E8%A1%8C%E8%BD%AC%E8%B4%A6%E6%97%B6%E7%9A%84%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 17 Jul 2019 09:26:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%93%B6%E8%A1%8C%E8%BD%AC%E8%B4%A6%E6%97%B6%E7%9A%84%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</guid>
      <description>1 如何解决银行转账时的并发问题 当出现 A 将钱转给 B 的时候，什么样的方案可以避免在转账时没有并发问题。先看以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Java 解决可见性和有序性问题的方法</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 16 Jul 2019 17:24:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>1 Happens-Before 规则 Java 通过提出 Happens-Before 规则来解决可见性和有序性的问题，Happens-Before 的意思是前面一个操作的结果对后续操作是可见的。 1.1 程序的顺序性</description>
    </item>
    
    <item>
      <title>信息的获取方式</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 16 Jul 2019 15:38:16 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</guid>
      <description>信息的获取方式主要分为四种 1 搜索引擎 基本上，碰到的问题都可以先上搜索引擎找一找，如果找不到，再考虑别的渠道，如果能找到就不要再去问别人，浪费</description>
    </item>
    
    <item>
      <title>并发编程需要解决的问题</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 16 Jul 2019 10:08:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>1 并发编程需要解决的问题 由于 CPU 从单核变成了多核引发了并发问题，其问题有三。一，每个 CPU 都有自己的缓存，当多个线程运行在不同核的 CPU 上并且修改同一</description>
    </item>
    
    <item>
      <title>TCP：连接的建立与断开</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/tcp%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/</link>
      <pubDate>Fri, 12 Jul 2019 21:22:03 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/tcp%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/</guid>
      <description>1 TCP 连接的建立 注：下述序号用 seq 表示 A 生成一个 TCP 数据包，包中 SYN = 1，seq = x，然后将包发给 B 此报文不能携带数据 B 收到包之后，生成一个 SYN = 1，</description>
    </item>
    
    <item>
      <title>TCP：首部结构</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 12 Jul 2019 15:05:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/tcp%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84/</guid>
      <description>1 TCP 数据在 IP 数据报中的封装 2 TCP 首部的数据格式 TCP 首部的数据结构，如果不计选项字段，首部是 20 个字节。 2.1 序号 32 位 序号是 32 位无符号数，序号范围从 0 到</description>
    </item>
    
    <item>
      <title>double 转 BigDecimal 造成的精度丢失</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/double-%E8%BD%AC-bigdecimal-%E9%80%A0%E6%88%90%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Wed, 10 Jul 2019 16:07:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/double-%E8%BD%AC-bigdecimal-%E9%80%A0%E6%88%90%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</guid>
      <description>1 2 3 4 5 6 public static void main(String[] args) { double d1 = 36.8d; double d2 = 36.5d; BigDecimal subtract = new BigDecimal(d1).subtract(new BigDecimal(d2)); System.out.println(subtract); } 对于上述类型的计算会得到结果 0.29999999999999715782905695</description>
    </item>
    
    <item>
      <title>网际协议：IP</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEip/</link>
      <pubDate>Tue, 09 Jul 2019 21:06:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEip/</guid>
      <description>1 网际协议 IP 简介 IP 协议提供不可靠的、无连接的数据包传输 不可靠指的是从客户端发到目标端的数据包对方可能会收不到 无连接指的是发送的每个数据包都是</description>
    </item>
    
    <item>
      <title>用户数据报协议：UDP</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</link>
      <pubDate>Tue, 09 Jul 2019 16:12:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp/</guid>
      <description>1 UDP 协议简介 UDP 是一种面向数据包协议，应用层向下传递的每一次操作都会产生一个 UDP 数据包，这一个 UDP 数据包会组装成一份 IP 数据包，这里是一一对应的关系</description>
    </item>
    
    <item>
      <title>学习路径</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Tue, 09 Jul 2019 09:26:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</guid>
      <description>1 学习路径 今天，了解到一个很有意思的词，学习路径。 学习路径在我的理解当中，便是沿着若干个学习目标，通过不断达成学习目标最终完成学习的过程。 光</description>
    </item>
    
    <item>
      <title>Java Gzip 的简单封装</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-gzip-%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</link>
      <pubDate>Thu, 04 Jul 2019 14:50:20 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-gzip-%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</guid>
      <description>本文基于 Jdk 1.8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.util.zip.GZIPInputStream; import java.util.zip.GZIPOutputStream; public class GzipUtil { /** *</description>
    </item>
    
    <item>
      <title>Java 性能优化</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Tue, 02 Jul 2019 16:22:25 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/java-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description>1 明确是否需要优化以及要优化到什么程度 首先需要在实践中检测代码是否需要优化，如果不需要优化，那么优化可能占用大量时间，而且优化完了也不会有任</description>
    </item>
    
    <item>
      <title>一次内存泄漏排查的经历</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Mon, 01 Jul 2019 13:14:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>开发环境: JDK: 1.8 Netty: 4.1.21.Final 1 起因 由于我之前写过一个接收医疗设备数据的项目，于是为了压力测试，就又按照该协议实现了一个发送设备数据的项目。这个项目在使</description>
    </item>
    
    <item>
      <title>数据库事务小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sat, 24 Nov 2018 14:30:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 为什么会有数据库事务 数据库在没有事务的情况下进行读写，可能出现脏读、不可重复读与幻读三种异常，而为了解决这三种异常，便引出了数据库事务，首</description>
    </item>
    
    <item>
      <title>Javap 命令的使用</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/javap-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 05 Nov 2018 10:43:36 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/javap-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>通过 javap 命令可以反编译 .class 文件，实际使用的时候 javap 后面的类名加与不加 .class 都可以。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -help --help -? 打印使用信息（也就是打印图中所示</description>
    </item>
    
    <item>
      <title>final、finally、finalize 的异同</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/finalfinallyfinalize-%E7%9A%84%E5%BC%82%E5%90%8C/</link>
      <pubDate>Wed, 17 Oct 2018 16:40:23 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/finalfinallyfinalize-%E7%9A%84%E5%BC%82%E5%90%8C/</guid>
      <description>1 final final 可以用来修饰类、方法、变量 1.1 final 修饰类 final 修饰 class 代表类不可以被继承 1.2 final 修饰变量 final 修饰的变量在初始化之后不能被再次赋值 1.3 final 修饰方法 final 修饰方法</description>
    </item>
    
    <item>
      <title>Exception 与 Error 的异同</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/exception-%E4%B8%8E-error-%E7%9A%84%E5%BC%82%E5%90%8C/</link>
      <pubDate>Tue, 16 Oct 2018 11:26:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/exception-%E4%B8%8E-error-%E7%9A%84%E5%BC%82%E5%90%8C/</guid>
      <description>Exception 和 Error 都是继承了 Throwable 类，在 Java 中只有继承了 Throwable 的类才可以被 throw 或者 catch，它是异常处理机制的基本组成类型。Exception 是程序正常运行中，可</description>
    </item>
    
    <item>
      <title>sed 小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/sed-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 04 Oct 2018 16:21:59 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/sed-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 sed 的工作流程 sed 逐行处理文件或输入，默认不会修改文件，除非使用 shell 重定向保存结果。 工作流程： 将正在处理的行保存在一个临时缓存区中（也称为模式空</description>
    </item>
    
    <item>
      <title>grep 小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/grep-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 25 Sep 2018 15:02:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/grep-%E5%B0%8F%E8%AE%B0/</guid>
      <description>grep -A [line num]，向下显示多少行，after-context 缩写 -B [line num]，向上显示多少行，before-context 缩写 -C [line num]，上</description>
    </item>
    
    <item>
      <title>tar &amp; scp 小记</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2018-hovel/tar-scp-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Sep 2018 17:35:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2018-hovel/tar-scp-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 scp 命令 上传：scp [文件路径] [用户名]@[IP 地址]:[服务器路径] 下载：scp [用户名]@[IP 地址]:[文件路径] [本地路径] 2 tar 命</description>
    </item>
    
    <item>
      <title>HashMap 不得不说的故事</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/hashmap-%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</link>
      <pubDate>Mon, 03 Sep 2018 10:13:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/hashmap-%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</guid>
      <description>本文基于 Jdk 1.8 1 什么是 HashMap 要理解这个问题，首先需要理解什么是 Hash 以及什么是 Map 1.1 什么是 Hash Hash 是一种散列算法，用于确定关键字到指定位置的对应关系 1.2 什么是</description>
    </item>
    
    <item>
      <title>int 入栈指令 iconst、bipush、sipush、ldc</title>
      <link>https://zhixiangyuan.github.io/post/hovel/2019-hovel/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</link>
      <pubDate>Sat, 11 Aug 2018 18:47:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/post/hovel/2019-hovel/int-%E5%85%A5%E6%A0%88%E6%8C%87%E4%BB%A4-iconstbipushsipushldc/</guid>
      <description>1 前言 本文介绍 int 数值入栈指令 iconst、bipush、sipubh、Idc。 根据 int 取值不同分为以下几种可能性： iconst: [-1, 5] bipush: [-128, -2]∪[6, 127] sipush:</description>
    </item>
    
  </channel>
</rss>